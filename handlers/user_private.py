import os
from aiogram import Router
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart

from keyboards.inline import main_menu
from google_sheets import get_available_dates, write_to_sheet, auth_google_sheets

user_private_router = Router()


class Registration(StatesGroup):
    user_name = State()
    date = State()
    time = State()
    name = State()
    contact = State()


async def handle_error(message: Message, state: FSMContext, error_msg: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logging.error(error_msg)
    await message.answer(
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
    await state.clear()



@user_private_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f'''üî• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º {message.from_user.full_name} –≤ —à–∫–æ–ª–µ –º–µ—á—Ç—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –≥—É—Ä—É –º–µ–±–µ–ª–∏! üõãÔ∏è‚ú®

–ó–¥–µ—Å—å –≤—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—É—á–∏—Ç–µ—Å—å ‚Äî –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø—Ä–æ—Ñ–∏, –æ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä—è—Ç –∫–ª–∏–µ–Ω—Ç—ã:

üìê –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–ø—É—Å–Ω—É—é –º–µ–±–µ–ª—å ‚Äî –æ—Ç —à–∫–∞—Ñ–æ–≤-–∫—É–ø–µ –¥–æ —ç–ª–∏—Ç–Ω—ã—Ö –≥–∞—Ä–¥–µ—Ä–æ–±–Ω—ã—Ö
üíª –†–∞–±–æ—Ç–∞—Ç—å –≤ ¬´–ë–ê–ó–ò–°-–ú–µ–±–µ–ª—å—â–∏–∫¬ª –∏ PRO100 ‚Äî –∫–∞–∫ 90% —Ç–æ–ø–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã ‚Äî –≥–∞–±–∞—Ä–∏—Ç—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 5 –º–∏–Ω—É—Ç
üî© –ü–æ–¥–±–∏—Ä–∞—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É ‚Äî —Å–∫—Ä—ã—Ç—ã–µ –ø–µ—Ç–ª–∏ Blum, –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ Hettich
‚úÇÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫—Ä–æ–π ‚Äî —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 30% –º–∞—Ç–µ—Ä–∏–∞–ª–∞
üöÄ –ò –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ ‚Äî –æ—Ç 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

‚è≥ –ü–æ—á–µ–º—É –∂–¥–∞—Ç—å?
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ ‚Äî –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫:
‚úÖ –ü–µ—Ä–≤—ã–º –∑–∞–∫–∞–∑–∞–º
‚úÖ –í—ã—Å–æ–∫–æ–º—É –¥–æ—Ö–æ–¥—É –∑–∞ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–ø–µ—á–∞—Ç–ª–∏—Ç –¥–∞–∂–µ —Å–∫–µ–ø—Ç–∏–∫–æ–≤''', reply_markup=main_menu())


@user_private_router.callback_query(lambda c: c.data == 'start_registration')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    try:
        dates = await get_available_dates()
        if not dates:
            await callback.message.edit_text("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return

        builder = InlineKeyboardBuilder()
        for date in dates:
            builder.add(InlineKeyboardButton(
                text=date,
                callback_data=f"date_{date}"
            ))
        builder.adjust(2)

        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Registration.date)
    except Exception as e:
        await handle_error(callback.message, state, f"Error in start_registration: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@user_private_router.callback_query(Registration.date, lambda c: c.data.startswith('date_'))
async def process_date(callback: CallbackQuery, state: FSMContext):
    try:
        date = callback.data.split('_')[1]
        await state.update_data(date=date)
        await state.update_data(user_name=callback.from_user.username)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        client = auth_google_sheets()
        sheet = client.open("–ú–µ–±–µ–ª—å—â–∏–∫").worksheet("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        records = sheet.get_all_records()

        available_times = sorted(set([
            row["–í—Ä–µ–º—è"] for row in records
            if row["–î–∞—Ç–∞"] == date and row["–ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç"] >= 1
        ]))

        if not available_times:
            await callback.message.edit_text(
                "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        builder = InlineKeyboardBuilder()
        for time in available_times:
            builder.add(InlineKeyboardButton(
                text=time,
                callback_data=f"time_{time}"
            ))
        builder.adjust(2)

        await callback.message.edit_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Registration.time)
    except Exception as e:
        await handle_error(callback.message, state, f"Error in process_date: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@user_private_router.callback_query(Registration.time, lambda c: c.data.startswith('time_'))
async def process_time(callback: CallbackQuery, state: FSMContext):
    try:
        time = callback.data.split('_')[1]
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        client = auth_google_sheets()
        sheet = client.open("–ú–µ–±–µ–ª—å—â–∏–∫").worksheet("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        records = sheet.get_all_records()

        time_valid = any(
            row["–î–∞—Ç–∞"] == data['date'] and
            row["–í—Ä–µ–º—è"] == time and
            row["–ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç"] >= 1
            for row in records
        )

        if not time_valid:
            await callback.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
            return

        await state.update_data(time=time)
        await callback.message.edit_text(
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        await state.set_state(Registration.name)
    except Exception as e:
        await handle_error(callback.message, state, f"Error in process_time: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@user_private_router.message(Registration.name)
async def process_name(message: Message, state: FSMContext):
    try:
        if len(message.text.strip()) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return

        await state.update_data(name=message.text.strip())
        await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (+375 (xx) xxx xx xx)")
        await state.set_state(Registration.contact)
    except Exception as e:
        await handle_error(message, state, f"Error in process_name: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@user_private_router.message(Registration.contact)
async def process_contact(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        phone = message.text.strip()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 9 or not any(char.isdigit() for char in phone):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        success = await write_to_sheet(
            name=data['name'],
            contact=phone,
            date=data['date'],
            time=data['time']
        )

        if not success:
            raise Exception("Failed to write to Google Sheets")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = f'''
‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫!</b>

üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}
‚è∞ <b>–í—Ä–µ–º—è:</b> {data['time']}
üë§ <b>–ò–º—è:</b> {data['name']}
üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {phone}
'''
        await message.answer(confirmation_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = os.getenv("ADMIN_ID")
        if admin_id:
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"üìù <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫!</b>\n\n"
                     f"üë§ –ò–º—è: {data['name']}\n"
                     f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                     f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
                     f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
                     f"üÜî ID: {message.from_user.id}\n"
                     f"üì≤ –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞: {'@' + data['user_name']}"
            )

    except Exception as e:
        await handle_error(message, state, f"Error in process_contact: {e}")
    finally:
        await state.clear()
